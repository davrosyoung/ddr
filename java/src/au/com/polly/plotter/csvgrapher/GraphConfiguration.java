/*
 * Copyright (c) 2011-2011 Polly Enterprises Pty Ltd and/or its affiliates.
 *  All rights reserved. This code is not to be distributed in binary
 * or source form without express consent of Polly Enterprises Pty Ltd.
 *
 *
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
 *  IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 *  THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 *  PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 *  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 *  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 *  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 *  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 *  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 *  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package au.com.polly.plotter.csvgrapher;

import au.com.polly.plotter.AxisConfiguration;
import au.com.polly.plotter.AxisConfigurationFactory;

import java.util.List;
import java.util.regex.Pattern;


/**
 * User defined preferences/configuration for a single graph to be generated. A single graph may have
 * multiple plots and axes, as well as defining the overall appearance (colours, dimenions, title)
 * of the graph to be produced.
 *
 * This was written to enable a plotting java application to be able to extract data from CSV files
 * generated by watson, and plot them, but to allow the plots to be generated to be configurable. 
 *
 */
public class GraphConfiguration
{

protected String title;
protected int width;
protected int height;
protected String imageTypeSuffix;
protected String destinationPath;
protected Pattern integerPattern = Pattern.compile("^\\-?\\d+$");
protected Pattern doublePattern = Pattern.compile("^\\-?\\d+\\.?\\d?$");
protected RootConfiguration rootConfiguration;
protected List<AxisConfiguration> axisConfigurations;
protected DataSeriesConfiguration xSeriesConfiguration;
protected DataSeriesConfiguration ySeriesConfiguration;
protected List<DataSeriesConfiguration> multiYSeriesConfiguration;
protected AxisConfigurationFactory axisConfigFactory;
protected DataSeriesConfigurationFactory dataSeriesConfigFactory;

/**
 * Default constructor.
 */
protected GraphConfiguration()
{
}


/**
*
* @return the title to display for this graph..
*/
public String getTitle()
{
    return title;
}

    /**
     *
      * @param title the title to display for this graph..
     */
public void setTitle(String title)
{
    this.title = title;
}

    /**
     *
     * @return the desired width of the generated graph, in pixels.
     */
public int getWidth()
{
    return width;
}


    /**
     *
     * @param width the desired width of the generated graph, in pixels.
     */
public void setWidth(int width)
{
    this.width = width;
}

/**
 *
 * @return the desired height of the generated graph, in pixels.
 */
public int getHeight()
{
    return height;
}

/**
 *
 * @param height of the generated graph, in pixels.
 */
public void setHeight( int height )
{
    this.height = height;
}

    /**
     *
      * @return should be png
     */
public String getImageTypeSuffix()
{
    return imageTypeSuffix;
}

    /**
     *
     * @param imageTypeSuffix just set this to png for now.
     */
public void setImageTypeSuffix(String imageTypeSuffix)
{
    this.imageTypeSuffix = imageTypeSuffix;
}

    /**
     *
     * @return the file where the graph is to be output.
     */
public String getDestinationPath()
{
    return destinationPath;
}

    /**
     *
     * @param destinationPath the file where the graph is to be output.
     */
public void setDestinationPath(String destinationPath)
{
    this.destinationPath = destinationPath;
    if ( getImageTypeSuffix() == null )
    {
        int dotPos = destinationPath.lastIndexOf( '.' );
        String suffix = destinationPath.substring( dotPos + 1 );
        setImageTypeSuffix( suffix );
    }
}

public List<AxisConfiguration> getAxisConfigurations()
{
    List<AxisConfiguration> result = null;

    result = this.axisConfigurations;
    
    return result;
}

public DataSeriesConfiguration getXSeriesConfiguration()
{
    return this.xSeriesConfiguration;
}

public DataSeriesConfiguration getYSeriesConfiguration()
{
    return this.ySeriesConfiguration;
}

public List<DataSeriesConfiguration> getMultiYSeriesConfiguration()
{
    return this.multiYSeriesConfiguration;
}

/**
 *
 * @return the parent root configuration object to which this
 * graph belongs (if any)
 */
public RootConfiguration getRootConfiguration()
{
    return rootConfiguration;
}

/**
 *
 * @return the parent root configuration object to which this
 * graph belongs (if any)
 */
public void setRootConfiguration(RootConfiguration rootConfiguration)
{
    this.rootConfiguration = rootConfiguration;
}

}